{"version":3,"sources":["components/readFile.jsx","components/pagination.jsx","components/searchbox.jsx","components/tables2.jsx","App.js","serviceWorker.js","index.js"],"names":["ReadFile","handleFileSelect","file","setState","loading","fileReader","FileReader","onloadend","handleFileRead","readAsText","e","content","result","props","setData","class","className","for","type","id","accept","onChange","target","files","React","Component","Pagination","state","pager","this","setPage","initialPage","prevProps","items","linesPerPage","_","isEqual","page","totalPages","getPager","length","pageOfItems","slice","startIndex","endIndex","onChangePage","totalItems","currentPage","pageSize","startPage","endPage","Math","ceil","min","pages","range","href","onClick","map","index","key","on","defaultProps","searchbox","placeholder","label","name","classes","allClasses","pl","aceholder","value","trim","App","myDataToMatrix","myData","delimiter","matrix","split","row","tableData","textToTableRows","el","createTable","setDelimiter","console","log","setLines","lines","parsedValue","Number","isNaN","alert","displayData","prevState","myKey","setInputText","data","setLoading","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.c38b833f.chunk.js","sourcesContent":["import React from \"react\";\n\nclass ReadFile extends React.Component {\n  handleFileSelect = file => {\n    this.setState({ loading: true });\n    this.fileReader = new FileReader();\n    this.fileReader.onloadend = this.handleFileRead;\n    this.fileReader.readAsText(file);\n  };\n  handleFileRead = e => {\n    const content = this.fileReader.result;\n    this.props.setData(content);\n  };\n  render() {\n    return (\n      <form>\n        <div class=\"custom-file\">\n          <label className=\"custom-file-label\" for=\"file\">\n            Please select the txt file...\n          </label>\n          <input\n            type=\"file\"\n            id=\"file\"\n            className=\"custom-file-input\"\n            accept=\".txt\"\n            onChange={e => this.handleFileSelect(e.target.files[0])}\n          />\n        </div>\n      </form>\n    );\n  }\n}\n\nexport default ReadFile;\n","import React, { PropTypes } from 'react';\nimport _ from 'lodash';\n \nconst defaultProps = {\n    initialPage: 1\n}\n \nclass Pagination extends React.Component {\n    constructor(props) {\n        super(props);\n        this.state = { pager: {} };\n    }\n \n    componentWillMount() {\n        this.setPage(this.props.initialPage);\n    }\n\n    componentDidUpdate(prevProps){\n        const { items, linesPerPage } = this.props;\n        if(!_.isEqual(prevProps.items, items) || prevProps.linesPerPage!==linesPerPage){\n            this.setPage(this.props.initialPage); \n        }\n    }\n\n    setPage(page) {\n        const { items, linesPerPage } = this.props;\n        var pager = this.state.pager;\n \n        if (page < 1 || page > pager.totalPages) {\n            return;\n        }\n \n        // get new pager object for specified page\n        pager = this.getPager(items.length, page, linesPerPage);\n \n        // get new page of items from items array\n        var pageOfItems = items.slice(pager.startIndex, pager.endIndex + 1);\n \n        // update state\n        this.setState({ pager: pager });\n \n        // call change page function in parent component\n        this.props.onChangePage(pageOfItems);\n    }\n \n    getPager(totalItems, currentPage, pageSize) {\n        // default to first page\n        currentPage = currentPage || 1;\n \n        // default page size is 2\n        pageSize = pageSize || 2;\n \n        // calculate total pages\n        var totalPages = Math.ceil(totalItems / pageSize);\n \n        var startPage, endPage;\n        if (totalPages <= 5) {\n            // less than 10 total pages so show all\n            startPage = 1;\n            endPage = totalPages;\n        } else {\n            // more than 10 total pages so calculate start and end pages\n            if (currentPage <= 2) {\n                startPage = 1;\n                endPage = 5;\n            } else if (currentPage + 2 >= totalPages) {\n                startPage = totalPages - 5;\n                endPage = totalPages;\n            } else {\n                startPage = currentPage - 2;\n                endPage = currentPage + 2;\n            }\n        }\n \n        // calculate start and end item indexes\n        var startIndex = (currentPage - 1) * pageSize;\n        var endIndex = Math.min(startIndex + pageSize - 1, totalItems - 1);\n \n        // create an array of pages to ng-repeat in the pager control\n        var pages = _.range(startPage, endPage + 1);\n \n        // return object with all pager properties required by the view\n        return {\n            totalItems: totalItems,\n            currentPage: currentPage,\n            pageSize: pageSize,\n            totalPages: totalPages,\n            startPage: startPage,\n            endPage: endPage,\n            startIndex: startIndex,\n            endIndex: endIndex,\n            pages: pages\n        };\n    }\n \n    render() {\n        var pager = this.state.pager;\n \n        return (\n            <nav>\n                <ul className=\"pagination\">\n                    <li className={pager.currentPage === 1 ? 'page-item disabled' : 'page-item'}>\n                        <a className=\"page-link\" href=\"#\" onClick={() => this.setPage(1)}>First</a>\n                    </li>\n                    <li className={pager.currentPage === 1 ? 'page-item disabled' : 'page-item'}>\n                        <a className=\"page-link\" href=\"#\" onClick={() => this.setPage(pager.currentPage - 1)}>Previous</a>\n                    </li>\n                    {pager.pages.map((page, index) =>\n                        <li key={index} className={pager.currentPage === page ? 'page-item active' : 'page-item'}>\n                            <a className=\"page-link\" href=\"#\" onClick={() => this.setPage(page)}>{page}</a>\n                        </li>\n                    )}\n                    <li className={pager.currentPage === pager.totalPages ? 'page-item disabled' : 'page-item'}>\n                        <a className=\"page-link\" href=\"#\" onClick={() => this.setPage(pager.currentPage + 1)}>Next</a>\n                    </li>\n                    <li className={pager.currentPage === pager.totalPages ? 'page-item disabled' : 'page-item'}>\n                        <a className=\"page-link\" href=\"#\"on onClick={() => this.setPage(pager.totalPages)}>Last</a>\n                    </li>\n                </ul>\n            </nav>\n        );\n    }\n}\n \n// Pagination.propTypes = propTypes;\nPagination.defaultProps=defaultProps;\nexport default Pagination;","import React from \"react\";\n\nclass searchbox extends React.Component {\n  render() {\n    const { placeholder, onChange, label, name, classes } = this.props;\n    const allClasses = classes ? ('form-group ' + classes) : 'form-group';\n    return (\n      <div className={allClasses}>\n       <label for={name}><strong>{label}</strong></label>\n        <input id={name} type=\"text\" className=\"form-control\" pl aceholder={placeholder} onChange={e=>onChange(e.target.value.trim())} />\n      </div>\n    );\n  }\n}\n\nexport default searchbox;\n","import React from \"react\";\nimport Pagination from \"./pagination\";\nimport SearchBox from \"./searchbox\";\nimport _ from \"lodash\";\n\nconst defaultDelimiter = \"|\";\nclass App extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      tableData: null,\n      displayData: [],\n      delimiter: defaultDelimiter,\n      lines: 2\n    };\n  }\n\n  componentDidMount() {\n    this.createTable();\n  }\n  componentDidUpdate(prevProps, prevState) {\n    const { delimiter, linesPerPage } = this.state;\n    if (prevState.delimiter !== this.state.delimiter) {\n      console.log(\"component updated with\", delimiter);\n      this.createTable();\n    }\n  }\n  myDataToMatrix = myData => {\n    const delimiter = this.state.delimiter || defaultDelimiter;\n    const matrix = myData.split(\"\\n\").map(row => row.split(delimiter));\n    this.setState({ tableData: matrix });\n  };\n  textToTableRows = matrix =>\n    matrix.map(row => (\n      <tr>\n        {row.map(el => (\n          <td>{el}</td>\n        ))}\n      </tr>\n    ));\n\n  createTable = () => {\n    const { myData } = this.props;\n    if (myData) {\n      this.myDataToMatrix(myData);\n    }\n  };\n\n  setDelimiter = delimiter => {\n    console.log(\"new delimiter is\" + delimiter);\n    this.setState({ delimiter });\n  };\n  setLines = lines => {\n    const parsedValue = Number(lines);\n    if(isNaN(parsedValue)) {\n      alert('Please insert a numeric value');\n      this.setState({ linesPerPage: 2 })\n    } else {\n      this.setState({ linesPerPage: parsedValue })\n    }\n  };\n\n  onChangePage = pageOfItems => {\n    this.setState({ displayData: pageOfItems });\n  };\n\n  render() {\n    const { tableData, displayData, linesPerPage } = this.state;\n    this.myKey = !this.myKey || false;\n    if (!(this.props.myData && tableData)) return <div>loading...</div>;\n    console.log(tableData);\n\n    return (\n      <div>\n        <form className=\"form-inline text-elements\">\n            <SearchBox\n              onChange={this.setDelimiter}\n              placeholder=\"Enter delimiter\"\n              label=\"Delimiter:\"\n              name=\"delimiter\"\n            />\n            <SearchBox\n              classes= 'lines-text'\n              onChange={this.setLines}\n              placeholder=\"Enter no. of lines\"\n              label=\"No. of Lines:\"\n              name=\"lines\"\n            />\n        </form>\n        <table className=\"table table-striped table-bordered table-hover\">\n          <tbody>{this.textToTableRows(displayData)}</tbody>\n        </table>\n        <Pagination\n          items={tableData}\n          onChangePage={this.onChangePage}\n          linesPerPage={linesPerPage}\n        />\n      </div>\n    );\n  }\n}\n\nexport default App;","import React from \"react\";\nimport \"./App.css\";\nimport \"bootstrap/dist/css/bootstrap.css\";\nimport ReadFile from \"./components/readFile\";\nimport Table from \"./components/tables2\";\nclass App extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = { myData: null };\n  }\n  setInputText = data => this.setState({ myData: data });\n  render() {\n    const { myData } = this.state;\n    return (\n      <div className=\"App\">\n        {myData ? (\n          <Table myData={myData} />\n        ) : (\n          <div>\n            <h1>Tool to display text into a table</h1>\n            <ReadFile\n              setData={this.setInputText}\n              setLoading={this.setLoading}\n            />\n          </div>\n        )}\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}